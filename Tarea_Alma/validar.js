function eliminarScripts(html) {
    return html.replace(/<script\b[^>]*>.*?<\/script>/gi, '');
}

function validar(form) {
    // Validar nombre
    var nombre = form.nombre.value.trim();
    if (nombre === "") {
        alert("Por favor, ingrese su nombre.");
        return false;
    }

    // Validar edad
    var edad = form.edad.value.trim();
    if (edad === "" || isNaN(edad) || edad <= 0) {
        alert("Por favor, ingrese una edad v√°lida.");
        return false;
    }

    // Validar selecci√≥n de sexo
    var sexo = form.sexo.value;
    if (sexo === "") {
        alert("Por favor, seleccione su sexo.");
        return false;
    }

    // Validar deporte favorito
    var deporte = form.deporte.value;
    if (deporte === "ninguno") {
        alert("Por favor, seleccione un deporte favorito.");
        return false;
    }

    // Eliminar scripts potencialmente peligrosos
    form.innerHTML = eliminarScripts(form.innerHTML);

    // Si todo es v√°lido
    return true;
}



/*
Usa expresiones regulares (regex):
/<script\b[^>]*>.*?<\/script>/gi
Desglose de la regex:

<script\b ‚Üí Encuentra la palabra "script" al inicio de una etiqueta (<script>).
[^>]*> ‚Üí Captura posibles atributos dentro de la etiqueta de apertura.
.*? ‚Üí Captura cualquier contenido dentro de la etiqueta de apertura y cierre (<script>...contenido...</script>).
</script> ‚Üí Busca la etiqueta de cierre.
g ‚Üí Significa "global", es decir, que eliminar√° todas las coincidencias.
i ‚Üí Hace que no distinga entre may√∫sculas y min√∫sculas (<SCRIPT> tambi√©n se eliminar√≠a).

form.innerHTML = eliminarScripts(form.innerHTML);
üîπ ¬øQu√© hace?

Antes de enviar el formulario, limpia su contenido eliminando cualquier <script> que haya sido inyectado en los campos.




 Explicaci√≥n del c√≥digo:
Funci√≥n eliminarScripts(html)

Usa una expresi√≥n regular (regex) para buscar y eliminar etiquetas <script>...</script>, incluyendo su contenido.
La g es para que elimine todas las coincidencias en el texto, y la i hace que la b√∫squeda no distinga entre may√∫sculas y min√∫sculas.
Integraci√≥n en la validaci√≥n:

Despu√©s de validar los campos, la funci√≥n elimina cualquier etiqueta <script> que pueda haber en el formulario antes de enviarlo.



¬°Tranqui! Te explico de manera m√°s clara para que veas para qu√© sirve y qu√© hace exactamente ese c√≥digo.

¬øQu√© problema estamos resolviendo?
En HTML y JavaScript, un usuario malintencionado puede intentar inyectar c√≥digo da√±ino en tu formulario.

Ejemplo de ataque:
Un usuario podr√≠a escribir en el campo de "Nombre" algo as√≠:

<script>alert('Hackeado!');</script>
Si tu c√≥digo no tiene protecci√≥n, esto har√≠a que aparezca una alerta en la p√°gina cuando se env√≠e el formulario. En un caso real, alguien podr√≠a inyectar c√≥digo para robar informaci√≥n o da√±ar tu sitio.

¬øC√≥mo lo evitamos?
El c√≥digo que te di detecta cualquier etiqueta <script>...</script> y la elimina para que no se ejecute nada peligroso en el formulario.
B√°sicamente, limpia el contenido del formulario antes de enviarlo.
Ejemplo con el c√≥digo funcionando:
Si un usuario intenta poner en el campo "Nombre":

<script>alert('Hackeado!');</script>
La funci√≥n eliminarScripts() lo transformar√° en:

(Ha eliminado la etiqueta <script>)
¬°As√≠ evitamos que el c√≥digo malicioso se ejecute!

¬øC√≥mo lo puedes probar?
Abre tu formulario en un navegador.
Intenta escribir <script>alert('Hackeado!');</script> en el campo "Nombre".
Cuando hagas clic en "Enviar", el script deber√≠a desaparecer.
Si no agregas esta protecci√≥n, el c√≥digo malicioso podr√≠a ejecutarse, lo cual es un problema de seguridad.*/